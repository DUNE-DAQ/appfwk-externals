include(ExternalProject)

# We could just set the CMAKE_INSTALL_*DIR directories directly to
# ${CMAKE_INSTALL_PREFIX}/${libevent_*_dir}, but we want to
# use CPack, which only knows about files/directories that are
# install()ed. So we install into a staging area and then install()
# from the staging area into the final destination.
#
# The libevent CMakeLists.txt doesn't use GNUInstallDirs, and I couldn't quickly get the library and includes to a directory I specified, so just do it by inspection
ExternalProject_Add (
  libevent

  PREFIX         libevent
  GIT_REPOSITORY https://github.com/libevent/libevent
  GIT_TAG        release-2.1.8-stable
  GIT_SHALLOW    ON

  BUILD_ALWAYS   OFF
  INSTALL_DIR    ${PROJECT_BINARY_DIR}/external_staging
  CMAKE_ARGS     -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
                 -DBUILD_SHARED_LIBS=on
                 -DCMAKE_POSITION_INDEPENDENT_CODE=on
)

# The trailing / on the DIRECTORY argument acts like it does for
# cp. We need it to avoid double directories in the output. We have to
# use relative paths for the DESTINATION (which are interpreted as
# being relative to ${CMAKE_INSTALL_PREFIX}), so that CPack will work
install(DIRECTORY ${PROJECT_BINARY_DIR}/external_staging/lib/
       DESTINATION ${libevent_lib_dir})
install(DIRECTORY ${PROJECT_BINARY_DIR}/external_staging/include/
       DESTINATION ${libevent_inc_dir})

# The libevent-targets.cmake file is generated by the inner cmake (ie, the
# one from libevent itself), and contains all the necessary definitions
# that allow other packages to link against/include libevent via `libevent::libevent`
# and similar. We can't generate it ourselves because it's
# autogenerated by cmake based on the targets that are declared in the
# cmake files. We have to copy it because ups puts installed cmake
# files in a non-standard place
install(FILES ${PROJECT_BINARY_DIR}/external_staging/lib/cmake/libevent/LibeventTargets.cmake
        DESTINATION ${libevent_lib_dir}/libevent/cmake/)
