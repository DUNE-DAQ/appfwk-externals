include(ExternalProject)

# CMAKE_INSTALL_*DIR paths are relative to $CMAKE_INSTALL_PREFIX, and
# not absolute. This is necessary to make CPack work, and to get a
# relocatable fmt-targets.cmake (see below)
ExternalProject_Add (
  fmt

  PREFIX         fmt
  GIT_REPOSITORY https://github.com/fmtlib/fmt
  GIT_TAG        6.2.1
  GIT_SHALLOW    ON

  BUILD_ALWAYS   OFF
  INSTALL_DIR    ${PROJECT_BINARY_DIR}/external_staging
  CMAKE_ARGS     -DCMAKE_INSTALL_PREFIX:PATH=<INSTALL_DIR>
                 -DCMAKE_INSTALL_LIBDIR:PATH=${fmt_lib_dir}
                 -DCMAKE_INSTALL_BINDIR:PATH=${fmt_bin_dir}
                 -DCMAKE_INSTALL_INCLUDEDIR:PATH=${fmt_inc_dir}
                 -DBUILD_SHARED_LIBS=on
)

# The trailing / on the DIRECTORY argument acts like it does for
# cp. We need it to avoid double directories in the output. We have to
# use relative paths for the DESTINATION (which are interpreted as
# being relative to ${CMAKE_INSTALL_PREFIX}), so that CPack will work
message(STATUS "Going to install ${PROJECT_BINARY_DIR}/external_staging to ${CMAKE_INSTALL_PREFIX}")
install(DIRECTORY ${PROJECT_BINARY_DIR}/external_staging/${fmt_lib_dir}/
       DESTINATION ${fmt_lib_dir})
install(DIRECTORY ${PROJECT_BINARY_DIR}/external_staging/${fmt_inc_dir}/
       DESTINATION ${fmt_inc_dir})
# The fmt-targets.cmake file is generated by the inner cmake (ie, the
# one from fmt itself), and contains all the necessary definitions
# that allow other packages to link against/include fmt via `fmt::fmt`
# and similar. We can't generate it ourselves because it's
# autogenerated by cmake based on the targets that are declared in the
# cmake files. We have to copy it because ups puts installed cmake
# files in a non-standard place
install(FILES ${PROJECT_BINARY_DIR}/external_staging/${fmt_lib_dir}/cmake/fmt/fmt-targets.cmake
        DESTINATION ${fmt_lib_dir}/fmt/cmake/)


